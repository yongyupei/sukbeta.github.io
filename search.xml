<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>parted 分区方法</title>
      <link href="/2018/08/10/parted-%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/10/parted-%E5%88%86%E5%8C%BA%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>parted 支持2TB以上的磁盘分区，并且允许调整分区的大小。</p><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><h4 id="MBR分区表：（MBR含义：主引导记录）"><a href="#MBR分区表：（MBR含义：主引导记录）" class="headerlink" title="MBR分区表：（MBR含义：主引导记录）"></a>MBR分区表：（MBR含义：主引导记录）</h4><ul><li>所支持的最大卷：2T （T; terabytes,1TB=1024GB）</li><li>对分区的设限：最多4个主分区或3个主分区加一个扩展分区。</li></ul><h4 id="GPT分区表：（GPT含义：GUID分区表）"><a href="#GPT分区表：（GPT含义：GUID分区表）" class="headerlink" title="GPT分区表：（GPT含义：GUID分区表）"></a>GPT分区表：（GPT含义：GUID分区表）</h4><ul><li>支持最大卷：18EB，（E：exabytes,1EB=1024TB）  </li><li>每个磁盘最多支持128个分区</li></ul><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h4 id="大于2T的整个磁盘分一个分区"><a href="#大于2T的整个磁盘分一个分区" class="headerlink" title="大于2T的整个磁盘分一个分区"></a>大于2T的整个磁盘分一个分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">parted /dev/sdb</span><br><span class="line">可以输入p打印磁盘信息，查看分区的情况，找到起始和结束位置。</span><br><span class="line"></span><br><span class="line">mklabel gpt</span><br><span class="line">　　设置分区类型为gpt</span><br><span class="line"></span><br><span class="line">mkpart primary 0% 100%</span><br><span class="line">　　primary指分区类型为主分区，0是分区开始位置，100%是分区结束位置。相同的命令为：mkpart primary 0 -1 或者是：mkpart  primary 0  XXX 结束的空间</span><br><span class="line"></span><br><span class="line">print</span><br><span class="line">　　打印当前分区,查看分区设置是否正确</span><br><span class="line">　　</span><br><span class="line">quit</span><br><span class="line">　　退出</span><br><span class="line">　　</span><br><span class="line">mkfs.xfs /dev/sdb1</span><br><span class="line">格式化</span><br></pre></td></tr></table></figure><h4 id="设置lvm分区"><a href="#设置lvm分区" class="headerlink" title="设置lvm分区"></a>设置lvm分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">parted /dev/sdb</span><br><span class="line">mklabel gpt</span><br><span class="line">mkpart primary xfs 0G 300G      # 300G的磁盘</span><br><span class="line">mkpart primary xfs 300G 500G    # 200G的磁盘</span><br><span class="line">mkpart primary xfs 500G -0G   # 500G到剩余所有空间的分区</span><br><span class="line">print</span><br><span class="line">set 1 lvm on   # 设置 第一个分区为 lvm 文件系统</span><br><span class="line">print</span><br><span class="line">rm 2       # 删除 2 分区  </span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line">mkfs.xfs /dev/sdb2</span><br><span class="line">mkfs.xfs /dev/sdb3</span><br></pre></td></tr></table></figure><h4 id="批量分区"><a href="#批量分区" class="headerlink" title="批量分区"></a>批量分区</h4><p>自己用的一个批量分区脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">yum install -y expect parted</span><br><span class="line"></span><br><span class="line">#for letter in b c d e f g h i j k l m</span><br><span class="line">for letter in `fdisk -l | grep 4000 | awk &apos;&#123;print $2&#125;&apos; | cut -c 8 | sort`</span><br><span class="line">do</span><br><span class="line">expect -c &apos;set timeout -1;</span><br><span class="line">spawn parted /dev/sd&apos;$letter&apos;;</span><br><span class="line">expect &quot;(parted)&quot;;</span><br><span class="line">send &quot;mklabel gpt\n&quot;;</span><br><span class="line">expect &quot;(parted)&quot;;</span><br><span class="line">send &quot;unit GB\n&quot;;</span><br><span class="line">expect &quot;(parted)&quot;;</span><br><span class="line">send &quot;mkpart primary 0 -1\n&quot;;</span><br><span class="line">expect &quot;(parted)&quot;;</span><br><span class="line">send &quot;quit\n&quot;;</span><br><span class="line">interact&apos;</span><br><span class="line"></span><br><span class="line">nohup mkfs.xfs /dev/sd$&#123;letter&#125;1 &gt; sd$letter.out 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="非交互式模式"><a href="#非交互式模式" class="headerlink" title="非交互式模式"></a>非交互式模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># parted /dev/sdb mklabel gpt </span><br><span class="line"># parted /dev/sdb mkpart primary 0 300G</span><br><span class="line"># parted /dev/sdb mkpart primary 300G 1000G </span><br><span class="line"># parted /dev/sdb mkpart logical 1000G -0G</span><br><span class="line"># parted /dev/sdb p</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> parted </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>源码安装mesos</title>
      <link href="/2018/08/06/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mesos/"/>
      <url>/2018/08/06/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mesos/</url>
      <content type="html"><![CDATA[<h1 id="源码安装mesos"><a href="#源码安装mesos" class="headerlink" title="源码安装mesos"></a>源码安装mesos</h1><p>源码安装mesos</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget http://archive.apache.org/dist/mesos/1.3.0/mesos-1.3.0.tar.gz</span><br><span class="line"></span><br><span class="line">需要 mvn 环境 export MAVEN_HOME</span><br><span class="line">yum groupinstall -y &quot;Development Tools&quot;</span><br><span class="line">yum install apr* patch libcurl libcurl-devel path python-devel java-1.7.0-openjdk-devel zlib-devel libcurl-devel openssl-devel cyrus-sasl-devel cyrus-sasl-md5 apr-devel subversion-devel apr-util-devel subversion subversion-devel systemtap systemtap-client zlib-devel</span><br><span class="line"></span><br><span class="line">tar -zxvf mesos-1.3.0.tar.gz</span><br><span class="line">cd mesos-1.3.0</span><br><span class="line">./configure --prefix=/home/mesos/mesos-slave</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>官网安装说明 ：   <a href="http://mesos.apache.org/documentation/latest/building/" target="_blank" rel="noopener">http://mesos.apache.org/documentation/latest/building/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># Install a few utility tools</span><br><span class="line">$ sudo yum install -y tar wget git</span><br><span class="line"></span><br><span class="line"># Fetch the Apache Maven repo file.</span><br><span class="line">$ sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo</span><br><span class="line"></span><br><span class="line"># Install the EPEL repo so that we can pull in &apos;libserf-1&apos; as part of our</span><br><span class="line"># subversion install below.</span><br><span class="line">$ sudo yum install -y epel-release</span><br><span class="line"></span><br><span class="line"># &apos;Mesos &gt; 0.21.0&apos; requires &apos;subversion &gt; 1.8&apos; devel package,</span><br><span class="line"># which is not available in the default repositories.</span><br><span class="line"># Create a WANdisco SVN repo file to install the correct version:</span><br><span class="line">$ sudo bash -c &apos;cat &gt; /etc/yum.repos.d/wandisco-svn.repo &lt;&lt;EOF</span><br><span class="line">[WANdiscoSVN]</span><br><span class="line">name=WANdisco SVN Repo 1.9</span><br><span class="line">enabled=1</span><br><span class="line">baseurl=http://opensource.wandisco.com/centos/7/svn-1.9/RPMS/\$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco</span><br><span class="line">EOF&apos;</span><br><span class="line"></span><br><span class="line"># Parts of Mesos require systemd in order to operate. However, Mesos</span><br><span class="line"># only supports versions of systemd that contain the &apos;Delegate&apos; flag.</span><br><span class="line"># This flag was first introduced in &apos;systemd version 218&apos;, which is</span><br><span class="line"># lower than the default version installed by centos. Luckily, centos</span><br><span class="line"># 7.1 has a patched &apos;systemd &lt; 218&apos; that contains the &apos;Delegate&apos; flag.</span><br><span class="line"># Explicity update systemd to this patched version.</span><br><span class="line">$ sudo yum update systemd</span><br><span class="line"></span><br><span class="line"># Install essential development tools.</span><br><span class="line">$ sudo yum groupinstall -y &quot;Development Tools&quot;</span><br><span class="line"></span><br><span class="line"># Install other Mesos dependencies.</span><br><span class="line">$ sudo yum install -y apache-maven python-devel python-six python-virtualenv java-1.8.0-openjdk-devel zlib-devel libcurl-devel openssl-devel cyrus-sasl-devel cyrus-sasl-md5 apr-devel subversion-devel apr-util-devel</span><br><span class="line"></span><br><span class="line"># Change working directory.</span><br><span class="line">$ cd mesos</span><br><span class="line"></span><br><span class="line"># Bootstrap (Only required if building from git repository).</span><br><span class="line">$ ./bootstrap</span><br><span class="line"></span><br><span class="line"># Configure and build.</span><br><span class="line">$ mkdir build</span><br><span class="line">$ cd build</span><br><span class="line">$ ../configure</span><br><span class="line">$ make</span><br><span class="line"></span><br><span class="line"># Run test suite.</span><br><span class="line">$ make check</span><br><span class="line"></span><br><span class="line"># Install (Optional).</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>用super启动mesos-agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@logstash00 conf]# cat mesos-agent.ini </span><br><span class="line">[program:mesos-agent]</span><br><span class="line">command = /home/mesos/mesos-slave/sbin/mesos-agent --master=zk://10.0.0.52:2181,10.0.0.53:2181,10.0.0.54:2181/mesos --log_dir=/var/log/mesos --containerizers=docker,mesos --executor_registration_timeout=5mins --work_dir=/home/mesos/mesos --hostname=logstash00 --attributes=nginx:ok;service:nginx;test:ok;app:nginx;db:ok;server:nginx</span><br><span class="line">autostart = true</span><br><span class="line">autorestart = true</span><br><span class="line">startsecs = 3</span><br><span class="line">startretries = 3</span><br><span class="line">stopwaitsecs = 5</span><br><span class="line">user = root</span><br><span class="line">redirect_stderr = true</span><br><span class="line">stdout_logfile = /home/mesos/logs/supervisor/mesos-agent.log</span><br><span class="line">stdout_logfile_maxbytes = 500MB</span><br><span class="line">stdout_logfile_backups = 3</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mesos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mesos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>logstash 配置文件写法</title>
      <link href="/2018/08/06/logstash-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95/"/>
      <url>/2018/08/06/logstash-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%86%99%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="logstash-配置文件"><a href="#logstash-配置文件" class="headerlink" title="logstash 配置文件"></a>logstash 配置文件</h1><h5 id="开启http接口，并把收集到的日志放入ES中。"><a href="#开启http接口，并把收集到的日志放入ES中。" class="headerlink" title="开启http接口，并把收集到的日志放入ES中。"></a>开启http接口，并把收集到的日志放入ES中。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    http &#123;</span><br><span class="line">         host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">         port =&gt; 7881   # 开启端口</span><br><span class="line">         codec =&gt; json  # 格式化 json</span><br><span class="line">          add_field =&gt; &#123;   # 添加字段，在接受到的每条日志中添加 marathon：base-marathon 一个字段</span><br><span class="line">            &quot;marathon&quot; =&gt; &quot;base-marathon&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">##  判断日志中包含 oam_type 的key 放到相应的ES索引中。192.168.5</span><br><span class="line">output &#123;</span><br><span class="line">     if [oam_type] == &quot;hadoop&quot; &#123;</span><br><span class="line">         elasticsearch &#123;</span><br><span class="line">              hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">              index =&gt; &quot;logstash-cd-hadoop-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">              flush_size =&gt; 10000</span><br><span class="line">              idle_flush_time =&gt; 60</span><br><span class="line">              template_overwrite =&gt; true</span><br><span class="line">          &#125;</span><br><span class="line">     &#125; else if [oam_type] == &quot;kafka&quot; &#123;</span><br><span class="line">         elasticsearch &#123;</span><br><span class="line">              hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">              index =&gt; &quot;logstash-cd-kafka-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">              flush_size =&gt; 10000</span><br><span class="line">              idle_flush_time =&gt; 60</span><br><span class="line">              template_overwrite =&gt; true</span><br><span class="line">          &#125;</span><br><span class="line">     &#125; else if [oam_type] == &quot;es&quot; &#123;</span><br><span class="line">         elasticsearch &#123;</span><br><span class="line">              hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">              index =&gt; &quot;logstash-cd-es-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">              flush_size =&gt; 10000</span><br><span class="line">              idle_flush_time =&gt; 60</span><br><span class="line">              template_overwrite =&gt; true</span><br><span class="line">          &#125;</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         elasticsearch &#123;</span><br><span class="line">              hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">              index =&gt; &quot;logstash-cd-marathon-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">              flush_size =&gt; 10000</span><br><span class="line">              idle_flush_time =&gt; 60</span><br><span class="line">              template_overwrite =&gt; true</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="从kafka中取出nginx日志，放入到HDFS上"><a href="#从kafka中取出nginx日志，放入到HDFS上" class="headerlink" title="从kafka中取出nginx日志，放入到HDFS上"></a>从kafka中取出nginx日志，放入到HDFS上</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;10.10.110.122:2181,10.10.110.123:2181,10.10.110.124:2181/kafka&quot;</span><br><span class="line">        group_id =&gt; &quot;logstash-kafka-hdfs&quot;</span><br><span class="line">        topic_id =&gt; &quot;prd_nginx_access&quot;</span><br><span class="line">        codec =&gt; plain</span><br><span class="line">        reset_beginning =&gt; false # boolean (optional)， default: false</span><br><span class="line">        consumer_threads =&gt; 1  # number (optional)， default: 1</span><br><span class="line">        decorate_events =&gt; false # boolean (optional)， default: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 格式化，将十二个月转换成数字。</span><br><span class="line">filter &#123;</span><br><span class="line">        grok &#123;</span><br><span class="line">                match =&gt; &#123;</span><br><span class="line">                        &quot;message&quot; =&gt;&quot;^(?&lt;hostname&gt;.+?)\s(?&lt;modulname&gt;.+?)\s(?&lt;remote_addr&gt;.+?)\s\-\s(?&lt;remote_user&gt;.+?)\s\[(?&lt;Day&gt;.+?)/(?&lt;Month&gt;.+?)/(?&lt;Year&gt;.+?):(?&lt;Hour&gt;.+?):&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if [Month] == &quot;Jan&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;01&quot;]</span><br><span class="line">                        &#125; </span><br><span class="line">        &#125; else if [Month] == &quot;Feb&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;02&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Mar&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;03&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Apr&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;04&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;May&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;05&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Jun&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;06&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Jul&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;07&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Aug&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;08&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Sep&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;09&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Oct&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;10&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Nov&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;11&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; else if [Month] == &quot;Dec&quot; &#123;</span><br><span class="line">                        mutate &#123;</span><br><span class="line">                                update =&gt; [&quot;Month&quot;,&quot;12&quot;]</span><br><span class="line">                        &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        if [modulname] &#123;</span><br><span class="line">           webhdfs &#123;</span><br><span class="line">                workers =&gt; 2</span><br><span class="line">                host =&gt; &quot;namenode-master.host.com&quot;</span><br><span class="line">                port =&gt; 50070</span><br><span class="line">                user =&gt; &quot;hadoop&quot;</span><br><span class="line">                path =&gt; &quot;/Data/Logs/domain=%&#123;modulname&#125;/dt=%&#123;Year&#125;%&#123;Month&#125;%&#123;Day&#125;/hour=%&#123;Hour&#125;/%&#123;modulname&#125;_%&#123;Year&#125;%&#123;Month&#125;%&#123;Day&#125;%&#123;Hour&#125;.log&quot;</span><br><span class="line">                flush_size =&gt; 5000</span><br><span class="line">                compression =&gt; &quot;gzip&quot;</span><br><span class="line">                idle_flush_time =&gt; 6</span><br><span class="line">                retry_interval =&gt; 3</span><br><span class="line">                retry_times =&gt; 3</span><br><span class="line">                codec =&gt; line &#123;</span><br><span class="line">                        format =&gt; &quot;%&#123;message&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">           file &#123;</span><br><span class="line">                path =&gt; &quot;/home/logs/supervisor/logstash_prd_kafka_hdfs_error.log&quot;</span><br><span class="line">                codec =&gt;  line &#123; format =&gt; &quot;custom format: %&#123;message&#125;&quot; &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stdout&#123;codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="收集nginx日志放到kafka中"><a href="#收集nginx日志放到kafka中" class="headerlink" title="收集nginx日志放到kafka中"></a>收集nginx日志放到kafka中</h5><p> 日志格式为文本, logstash 放到kafka中会变成一个大的json串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; [&quot;/home/nginx/logs/accesslog/**/*.log&quot;]</span><br><span class="line">        exclude =&gt; [&quot;/home/nginx/logs/accesslog/11.test.com/*.log&quot;,&quot;/home/nginx/logs/accesslog/2.test.com/*.log&quot;,&quot;/home/nginx/logs/accesslog/3.test.com/*.log&quot;]</span><br><span class="line">        sincedb_path =&gt; &quot;/home/optools/logstash/sincedb&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">        discover_interval =&gt; 10</span><br><span class="line">        close_older =&gt; 3600</span><br><span class="line">        ignore_older =&gt; 86400</span><br><span class="line">        sincedb_write_interval =&gt; 5</span><br><span class="line">        stat_interval =&gt; 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        bootstrap_servers =&gt; &quot;kafka00:9092,kafka01:9092,kafka02:9092&quot;</span><br><span class="line">        topic_id =&gt; &quot;prd_nginx_access&quot;</span><br><span class="line">        compression_type =&gt; &quot;gzip&quot;</span><br><span class="line">        codec =&gt; plain &#123;</span><br><span class="line">                        format =&gt; &quot;%&#123;message&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理json日志"><a href="#处理json日志" class="headerlink" title="处理json日志"></a>处理json日志</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; [&quot;/home/logs/v4-weblog/*.log&quot;]</span><br><span class="line">        sincedb_path =&gt; &quot;/home/logstash/conf/sincedb&quot;</span><br><span class="line">        start_position =&gt; &quot;beginning&quot;</span><br><span class="line">        codec =&gt; &quot;json&quot;  # 往后端传是json，如果后端要文本，codec =&gt; &quot;plain&quot;</span><br><span class="line">        discover_interval =&gt; 10</span><br><span class="line">        close_older =&gt; 3600</span><br><span class="line">        ignore_older =&gt; 86400</span><br><span class="line">        sincedb_write_interval =&gt; 5</span><br><span class="line">        stat_interval =&gt; 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        kafka &#123;</span><br><span class="line">        topic_id =&gt; &quot;weblogv4_mx_wandafilm&quot;</span><br><span class="line">        bootstrap_servers =&gt; &quot;192.168.5.30:9092,192.168.5.38:9092,192.168.5.48:9092&quot;</span><br><span class="line">        codec =&gt; plain &#123;</span><br><span class="line">                        format =&gt; &quot;%&#123;message&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    #stdout&#123;</span><br><span class="line">    #    codec =&gt; rubydebug</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;192.168.5.18:2181,192.168.5.28:2181,192.168.5.30:2181,192.168.5.38:2181,192.168.5.48:2181&quot;</span><br><span class="line">        group_id =&gt; &quot;huawei_hard_monitor&quot;</span><br><span class="line">        topic_id =&gt; &quot;huawei_hard_monitor&quot;</span><br><span class="line">        codec =&gt; json</span><br><span class="line">        reset_beginning =&gt; false # boolean (optional)， default: false</span><br><span class="line">        consumer_threads =&gt; 1  # number (optional)， default: 1</span><br><span class="line">        decorate_events =&gt; false # boolean (optional)， default: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">        grok &#123;</span><br><span class="line">                match =&gt; &#123;</span><br><span class="line">                        &quot;SNMPv2-SMI::enterprises.2011.23.2.1&quot; =&gt; &quot;^Location:(?&lt;Location&gt;.*?); Time:(?&lt;Time&gt;.*?); Sensor:(?&lt;Sensor&gt;.*?); Severity:(?&lt;Severity&gt;.*?); Code:(?&lt;Code&gt;.*?); Description:(?&lt;Description&gt;.*?)$&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mutate &#123;</span><br><span class="line">                rename =&gt; [&quot;SNMPv2-MIB::sysUpTime.0&quot;, &quot;SNMPv2-MIB--sysUpTime-0&quot;]</span><br><span class="line">                rename =&gt; [&quot;SNMPv2-MIB::snmpTrapOID.0&quot;, &quot;SNMPv2-MIB--snmpTrapOID-0&quot;]</span><br><span class="line">                rename =&gt; [&quot;SNMPv2-SMI::enterprises.2011.23.2.1&quot;, &quot;SNMPv2-SMI--enterprises_2011_23_2_1&quot;]</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">           elasticsearch &#123;</span><br><span class="line">                workers =&gt; 4</span><br><span class="line">                hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">                index =&gt; &quot;logstash-huawei_hard_monitor-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">                flush_size =&gt; 50000</span><br><span class="line">                idle_flush_time =&gt; 30</span><br><span class="line">                template_overwrite =&gt; true</span><br><span class="line">            &#125;</span><br><span class="line">#        stdout&#123;codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="nginx-日志收集"><a href="#nginx-日志收集" class="headerlink" title="nginx 日志收集"></a>nginx 日志收集</h5><p>中文转码，\x 转为Xx \\x 转为 XXx<br>添加字段，nginx access 和 error 日志放在不同索引中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;192.168.5.30:2181,192.168.5.38:2181,192.168.5.48:2181,192.168.5.18:2181,192.168.5.28:2181&quot;</span><br><span class="line">        group_id =&gt; &quot;logstash-docker-nginx&quot;</span><br><span class="line">        topic_id =&gt; &quot;test_for_docker&quot;</span><br><span class="line">        codec =&gt; json</span><br><span class="line">        reset_beginning =&gt; false # boolean (optional)， default: false</span><br><span class="line">        consumer_threads =&gt; 4  # number (optional)， default: 1</span><br><span class="line">        decorate_events =&gt; false # boolean (optional)， default: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">        ruby &#123;</span><br><span class="line">                code =&gt; &quot;</span><br><span class="line">                  event[&apos;log&apos;] = event[&apos;log&apos;].gsub(&apos;\x&apos;,&apos;Xx&apos;)</span><br><span class="line">                  event[&apos;log&apos;] = event[&apos;log&apos;].gsub(&apos;\\x&apos;,&apos;XXx&apos;)</span><br><span class="line">                  &quot;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        if &quot;http_cookie&quot; in [log] &#123;</span><br><span class="line">                mutate &#123; add_tag =&gt; &quot;nginx-access&quot; &#125;</span><br><span class="line">                json &#123;</span><br><span class="line">                         source =&gt; &quot;log&quot;</span><br><span class="line">                &#125;</span><br><span class="line">                mutate &#123;</span><br><span class="line">                        convert =&gt; [</span><br><span class="line">                        &quot;status&quot;, &quot;integer&quot;,</span><br><span class="line">                        &quot;body_bytes_sent&quot; , &quot;integer&quot;,</span><br><span class="line">                        &quot;upstream_response_time&quot;, &quot;float&quot;,</span><br><span class="line">                        &quot;request_time&quot;, &quot;float&quot;</span><br><span class="line">                        ]</span><br><span class="line">                        remove_field =&gt; &quot;log&quot;</span><br><span class="line">                &#125;</span><br><span class="line">                geoip &#123;</span><br><span class="line">                        source =&gt; &quot;ip&quot;</span><br><span class="line">                &#125;</span><br><span class="line">                date &#123;</span><br><span class="line">                        match =&gt; [&quot;time_local&quot;, &quot;ISO8601&quot;]</span><br><span class="line">                        locale =&gt;&quot;en&quot;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">                 mutate &#123; add_tag =&gt; &quot;nginx-error&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">        if &quot;nginx-access&quot;  in [tags] &#123;</span><br><span class="line">           elasticsearch &#123;</span><br><span class="line">                workers =&gt; 4</span><br><span class="line">                hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">                index =&gt; &quot;logstash-nginxaccess-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">                flush_size =&gt; 10240</span><br><span class="line">                idle_flush_time =&gt; 30</span><br><span class="line">                template_overwrite =&gt; true</span><br><span class="line">                &#125;</span><br><span class="line">         &#125; else if &quot;nginx-error&quot; in [tags] &#123;</span><br><span class="line">             elasticsearch &#123;</span><br><span class="line">                workers =&gt; 4</span><br><span class="line">                hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">                index =&gt; &quot;logstash-nginxerror-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">                flush_size =&gt; 100</span><br><span class="line">                idle_flush_time =&gt; 5</span><br><span class="line">                template_overwrite =&gt; true</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#               stdout&#123;codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="转换时间"><a href="#转换时间" class="headerlink" title="转换时间"></a>转换时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        zk_connect =&gt; &quot;192.168.5.18:2181,192.168.5.28:2181,192.168.5.30:2181,192.168.5.38:2181,192.168.5.48:2181&quot;</span><br><span class="line">        group_id =&gt; &quot;es-hdfs&quot;</span><br><span class="line">        topic_id =&gt; &quot;logdata-es&quot;</span><br><span class="line">        codec =&gt; json</span><br><span class="line">        reset_beginning =&gt; false # boolean (optional)， default: false</span><br><span class="line">        consumer_threads =&gt; 1  # number (optional)， default: 1</span><br><span class="line">        decorate_events =&gt; false # boolean (optional)， default: false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">        date &#123;</span><br><span class="line">                match =&gt; [ &quot;time&quot; , &quot;yyyy-MM-dd HH:mm:ss&quot; ]</span><br><span class="line">                locale =&gt; &quot;zh&quot;</span><br><span class="line">                timezone =&gt; &quot;-00:00:00&quot;</span><br><span class="line">                target =&gt; &quot;@timestamp&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">     elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;192.168.5.27:9250&quot;,&quot;192.168.5.28:9250&quot;,&quot;192.168.5.29:9250&quot;]</span><br><span class="line">        index =&gt; &quot;logstash-%&#123;app&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">        #document_type =&gt; &quot;%&#123;type&#125;&quot;</span><br><span class="line">        flush_size =&gt; 3840</span><br><span class="line">        idle_flush_time =&gt; 10</span><br><span class="line">        template_overwrite =&gt; true</span><br><span class="line">    &#125;</span><br><span class="line">#  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> logstash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logstash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>marathon事件日志收集</title>
      <link href="/2018/07/26/marathon%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
      <url>/2018/07/26/marathon%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<h2 id="marathon-事件日志收到到ES中"><a href="#marathon-事件日志收到到ES中" class="headerlink" title="marathon 事件日志收到到ES中"></a>marathon 事件日志收到到ES中</h2><p>  marathon 有配置可以主动把 marathon 的事件日志发送到 http 接口上。这里的事件包括，发布容器的json内容，docker容器死掉、启动，运行、kill，健康检查等日志。也可以说 marathon 所有的动作日志这上都会有。所有我要把这个日志收集起来，并可以做监控，历史查询等等。<br>  先说一下我的方案：<br>  启动一个logstash实例，并配置http接口，把收集到的日志存到ES索引中。<br>  marathon 配置 logstash 的 http 接口地址，把日志发送到这里即可。<br>  后期可以在ES中查询你想要的事件日志，并报警，或用kibana出图等。  </p><h3 id="logstash-配置"><a href="#logstash-配置" class="headerlink" title="logstash 配置"></a>logstash 配置</h3><p>#####logstash 配置文件<br>vim /etc/logstash.conf  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    http &#123;</span><br><span class="line">         host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">         port =&gt; 7882</span><br><span class="line">         codec =&gt; json</span><br><span class="line">          add_field =&gt; &#123;</span><br><span class="line">            &quot;marathon&quot; =&gt; &quot;base-marathon&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">     elasticsearch &#123;</span><br><span class="line">          hosts =&gt; [&quot;10.214.193.27:9250&quot;,&quot;10.214.193.28:9250&quot;,&quot;10.214.193.29:9250&quot;]</span><br><span class="line">          index =&gt; &quot;logstash-marathon-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">          flush_size =&gt; 10000</span><br><span class="line">          idle_flush_time =&gt; 60</span><br><span class="line">          template_overwrite =&gt; true</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 add_field 添加一个字段  “marathon”:”base-marathon”<br>这样 ES的一个索引所可以放多个marathon的日志，但是需要启动多个logstash，每个配置不同，因为marathon的日志是一样的，区别不出来是哪个集群的日志。  </p><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>可以用supervisor或docker方式启动。就不在这里说了。</p><h3 id="marathon-配置"><a href="#marathon-配置" class="headerlink" title="marathon 配置"></a>marathon 配置</h3><p>我用的是 yum 安装的marathon，版本是 1.4.9 , 配置是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/marathon/conf/</span><br><span class="line"></span><br><span class="line">echo &quot;http_callback&quot; &gt; /etc/marathon/conf/event_subscriber</span><br><span class="line">echo &quot;http://logstashIP:7882&quot; &gt; /etc/marathon/conf/http_endpoints</span><br></pre></td></tr></table></figure><p>二进制配置的参数是一样的。  </p><p>重启服务加载配置  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart marathon</span><br></pre></td></tr></table></figure><h4 id="ES-上查询日志"><a href="#ES-上查询日志" class="headerlink" title="ES 上查询日志"></a>ES 上查询日志</h4><p>这样配置完成之后，等marathon有动作的话，ES上就会有数据了，   </p><p>如：<br><img src="/images/marathon-es-data.png" alt="marathon-es-data"></p><p>这只是一个事件，还还有好多时间呢！</p>]]></content>
      
      <categories>
          
          <category> marathon </category>
          
      </categories>
      
      
        <tags>
            
            <tag> marathon </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Unix / Linux ssh-add Command Examples to Add SSH Key to Agent (转)</title>
      <link href="/2018/07/11/Unix-Linux-ssh-add-Command-Examples-to-Add-SSH-Key-to-Agent-%E8%BD%AC/"/>
      <url>/2018/07/11/Unix-Linux-ssh-add-Command-Examples-to-Add-SSH-Key-to-Agent-%E8%BD%AC/</url>
      <content type="html"><![CDATA[<h3 id="Unix-Linux-ssh-add-Command-Examples-to-Add-SSH-Key-to-Agent"><a href="#Unix-Linux-ssh-add-Command-Examples-to-Add-SSH-Key-to-Agent" class="headerlink" title="Unix / Linux ssh-add Command Examples to Add SSH Key to Agent"></a>Unix / Linux ssh-add Command Examples to Add SSH Key to Agent</h3><p>ssh-add is a helper program for ssh-agent.<br>ssh-add adds RSA or DSA identity files to the ssh agent. For ssh-add to work properly, the agent should be running, and have the SSH_AUTH_SOCK environment variable set.  </p><ol><li>Fix “Could not Open” Error (and Add Default RSA/DSA identities)<br>By default, when you try to execute the ssh-add command, you might get “Could not open a connection to your authentication agent.” error message as shown below.  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add</span><br><span class="line">Could not open a connection to your authentication agent.</span><br><span class="line">The reason is ssh-agent is not running.  </span><br><span class="line">But, if you start the ssh-agent as shown below, you’ll still get the same error.  </span><br><span class="line"></span><br><span class="line">$ ssh-agent</span><br><span class="line">SSH_AUTH_SOCK=/tmp/ssh-cYYsc14689/agent.14689; export SSH_AUTH_SOCK;</span><br><span class="line">SSH_AGENT_PID=14690; export SSH_AGENT_PID;</span><br><span class="line">echo Agent pid 14690;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add</span><br><span class="line">Could not open a connection to your authentication agent.</span><br><span class="line">In order to fix the issue, you should start the ssh-agent as shown below.  </span><br><span class="line"></span><br><span class="line">$ exec ssh-agent bash</span><br><span class="line">Now, when you execute the ssh-add, it will add the ~/.ssh/id_rsa, ~/.ssh/id_dsa and ~/.ssh/identity files to ssh-agent, and will not throw any error message.</span><br><span class="line"></span><br><span class="line">$ ssh-add</span><br><span class="line">Identity added: /home/ramesh/.ssh/id_rsa (/home/ramesh/.ssh/id_rsa)</span><br><span class="line">Identity added: /home/ramesh/.ssh/id_dsa (/home/ramesh/.ssh/id_dsa)</span><br></pre></td></tr></table></figure><ol start="2"><li>Display the entries loaded in ssh-agent<br>Use either -l or -L as shown below to display all the RSA and DSA entries that are currently loaded into the ssh-agent.<br>The following examples shows that there are two entries currently loaded to the ssh-agent.  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line">2048 34:36:63:c2:7d:a5:13:e4 /home/ramesh/.ssh/id_rsa (RSA)</span><br><span class="line">1024 ee:60:11:bf:1b:31:3b:fb /home/ramesh/.ssh/id_dsa (DSA)</span><br><span class="line"></span><br><span class="line">$ ssh-add -L</span><br><span class="line">ssh-rsa A2EAAAABIwAAAQEAtVRcaEnxOef0n5WLr9DV1JsLpx4E+P2Zf/N9JBLBbVKDD1BZf</span><br><span class="line">eRmLK8hZZKf0iva8+q1VNyxQB5oTfKGr79ll7KDRwfIgErw== /home/ramesh/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">ssh-dsa 8WDTpyJiLUNlIXSfCRe7nOjeMlgyn8vM3cWsosO0x4eMDYEMvefzhev0RAtbhyBvs</span><br><span class="line">WLLCwkaVzCZdZvsDa2cl7zKRd+3zLSfBQRa1wpMjJaeJbCg== /home/ramesh/.ssh/id_dsa</span><br></pre></td></tr></table></figure><ol start="3"><li>Delete all entries from ssh-agent<br>Use option -D as shown below to remove all the ssh entries from the ssh-agent.  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -D</span><br><span class="line">All identities removed.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line">The agent has no identities.</span><br></pre></td></tr></table></figure><ol start="4"><li>Delete specific entries from ssh-agent<br>Using -d option, you can specify exactly what entries you like to delete.<br>The following example will remove only the default RSA entry from the ssh-agent.  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -l</span><br><span class="line">2048 34:36:63:c2:7d:a5:13:e4 /home/ramesh/.ssh/id_rsa (RSA)</span><br><span class="line">1024 ee:60:11:bf:1b:31:3b:fb /home/ramesh/.ssh/id_dsa (DSA)</span><br><span class="line"></span><br><span class="line">$ ssh-add -d /home/ramesh/.ssh/id_rsa</span><br><span class="line">Identity removed: /home/ramesh/.ssh/id_rsa (/home/ramesh/.ssh/id_rsa.pub)</span><br><span class="line"></span><br><span class="line">$ ssh-add -l</span><br><span class="line">1024 ee:60:11:bf:1b:31:3b:fb /home/ramesh/.ssh/id_dsa (DSA)</span><br></pre></td></tr></table></figure><ol start="5"><li>Lock (or) Unlock the SSH Agent<br>You can lock the ssh agent as shown below using -x option. Once you lock the agent, you cannot add, delete, or list entries in the ssh agent without a password.  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -x</span><br><span class="line">Enter lock password:</span><br><span class="line">Again:</span><br><span class="line">Agent locked.</span><br><span class="line">After locking, if you try to add, you’ll se SSH_AGENT_FAILURE message as shown below.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add</span><br><span class="line">SSH_AGENT_FAILURE</span><br><span class="line">SSH_AGENT_FAILURE</span><br><span class="line">Could not add identity: /home/ramesh/.ssh/id_rsa</span><br><span class="line">To unlock an agent, use -X option as shown below. Make sure you enter the same password that you gave while locking the agent. If you give a wrong password, you’ll set “Failed to unlock agent.” message.</span><br><span class="line"></span><br><span class="line">$ ssh-add -X</span><br><span class="line">Enter lock password:</span><br><span class="line">Agent unlocked.</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cgroup 服务限制进程资源</title>
      <link href="/2018/07/05/cgroup-%E6%9C%8D%E5%8A%A1%E9%99%90%E5%88%B6%E8%BF%9B%E7%A8%8B%E8%B5%84%E6%BA%90/"/>
      <url>/2018/07/05/cgroup-%E6%9C%8D%E5%8A%A1%E9%99%90%E5%88%B6%E8%BF%9B%E7%A8%8B%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<h2 id="用-cgroup-服务限制进程资源"><a href="#用-cgroup-服务限制进程资源" class="headerlink" title="用 cgroup 服务限制进程资源"></a>用 cgroup 服务限制进程资源</h2><h3 id="CGroup-功能及组成"><a href="#CGroup-功能及组成" class="headerlink" title="CGroup 功能及组成"></a>CGroup 功能及组成</h3><p>  CGroup 是将任意进程进行分组化管理的 Linux 内核功能。CGroup 本身是提供将进程进行分组化管理的功能和接口的基础结构，I/O 或内存的分配控制等具体的资源管理功能是通过这个功能来实现的。这些具体的资源管理功能称为 CGroup 子系统或控制器。CGroup 子系统有控制内存的 Memory 控制器、控制进程调度的 CPU 控制器等。运行中的内核可以使用的 Cgroup 子系统由/proc/cgroup 来确认。  </p><p>  CGroup 提供了一个 CGroup 虚拟文件系统，作为进行分组管理和各子系统设置的用户接口。要使用 CGroup，必须挂载 CGroup 文件系统。这时通过挂载选项指定使用哪个子系统。</p><h4 id="安装cgroup服务"><a href="#安装cgroup服务" class="headerlink" title="安装cgroup服务"></a>安装cgroup服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">centos 6</span><br><span class="line">yum install -y libcgroup</span><br><span class="line"></span><br><span class="line">centos 7 </span><br><span class="line">yum install -y libcgroup libcgroup-tools</span><br></pre></td></tr></table></figure><h4 id="配置cgroup配置"><a href="#配置cgroup配置" class="headerlink" title="配置cgroup配置"></a>配置cgroup配置</h4><p>  这里需要是限制cpu<br>  先创建一个组，把需要限制的进程，启动的时候放到这组下。  </p><p>vim /etc/cgconfig.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mount &#123;</span><br><span class="line">#       cpuset  = /cgroup/cpuset;</span><br><span class="line">        cpu     = /cgroup/cpu;</span><br><span class="line">#       cpuacct = /cgroup/cpuacct;</span><br><span class="line">#       memory  = /cgroup/memory;</span><br><span class="line">#       devices = /cgroup/devices;</span><br><span class="line">#       freezer = /cgroup/freezer;</span><br><span class="line">#       net_cls = /cgroup/net_cls;</span><br><span class="line">#       blkio   = /cgroup/blkio;</span><br><span class="line">&#125;</span><br><span class="line">group yarn &#123;       # yarn 为组名</span><br><span class="line">   perm &#123;</span><br><span class="line">    task &#123;</span><br><span class="line">        uid = hadoop;     # 权限设置，为hadoop</span><br><span class="line">        gid = hadoop;</span><br><span class="line">    &#125;</span><br><span class="line">    admin &#123;</span><br><span class="line">       uid = hadoop;</span><br><span class="line">       gid = hadoop;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   cpu &#123;   # 可以用 cpu.cfs_period_us 和 cpu.cfs_quota_us 来限制该组中的所有进程在单位时间里可以使用的 cpu 时间。</span><br><span class="line">          cpu.cfs_period_us= 100000;  # 就是时间周期，默认为 100000，即百毫秒  值的范围： 1000-100000 </span><br><span class="line">          cpu.cfs_quota_us= 2160000;  # cpu.cfs_quota_us 就是在这期间内可使用的 cpu 时间，默认 -1，即无限制</span><br><span class="line">   &#125;   # 现在这个设置代表，这个组可以用的cpu为21.6盒，2160000/100000 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动cgroup服务"><a href="#启动cgroup服务" class="headerlink" title="启动cgroup服务"></a>启动cgroup服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service cgroup restart</span><br><span class="line">chkconfig cgroup on</span><br></pre></td></tr></table></figure><h4 id="启动-yarn-服务"><a href="#启动-yarn-服务" class="headerlink" title="启动 yarn 服务"></a>启动 yarn 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - hadoop</span><br><span class="line">yarn-daemon.sh stop nodemanager</span><br><span class="line">cgexec -g cpu:yarn yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure><p>注释： 用cgexe启动的服务，他的子进程也会在这个cgroup组下。总体cpu加和不会超过组的设置。</p><p>查看进程在哪个组下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@db-datanode09 ~]$ ps -eo pid,cgroup,cmd</span><br><span class="line">153514 cpu:/                               /sbin/udevd -d</span><br><span class="line">153515 cpu:/                               /sbin/udevd -d</span><br><span class="line">154089 cpu:/yarn                           /usr/java/jdk1.8.0_45/bin/java -Dproc_nodemanager -Xmx4096m -Dhadoop.log.dir=/home/hadoop/apache-hadoop/hadoop/logs</span><br><span class="line"></span><br><span class="line"># 注释： cpu:/  代表在cgroup根配置下，cpu:/yarn 代表在根的yarn的配置下</span><br></pre></td></tr></table></figure><p>检查服务  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /sys/fs/cgroup/cpu/yarn</span><br><span class="line">cat tasks | grep &quot;nodemanager PID&quot;</span><br></pre></td></tr></table></figure><p>这是在 /cgroup/cpu/ 目录下就会出现 yarn 目录， 权限是hadoop用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@db-datanode09 cpu]# cd /cgroup/cpu/yarn</span><br><span class="line">[root@db-datanode09 yarn]# ls -l</span><br><span class="line">total 0</span><br><span class="line">--w--w---- 1 hadoop hadoop 0 Aug  1 14:19 cgroup.event_control</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:19 cgroup.procs</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:19 cpu.cfs_period_us</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:19 cpu.cfs_quota_us</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:19 cpu.rt_period_us</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:19 cpu.rt_runtime_us</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:19 cpu.shares</span><br><span class="line">-r--r--r-- 1 hadoop hadoop 0 Aug  1 14:19 cpu.stat</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:19 notify_on_release</span><br><span class="line">-rw-rw-r-- 1 hadoop hadoop 0 Aug  1 14:22 tasks</span><br></pre></td></tr></table></figure><hr><h2 id="cgroup服务几种模式介绍"><a href="#cgroup服务几种模式介绍" class="headerlink" title="cgroup服务几种模式介绍"></a>cgroup服务几种模式介绍</h2><h4 id="cgroup-配置文件说明"><a href="#cgroup-配置文件说明" class="headerlink" title="cgroup 配置文件说明"></a>cgroup 配置文件说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mount &#123;</span><br><span class="line">       cpuset  = /cgroup/cpuset;为cgroup中的任务分配独立的cpu</span><br><span class="line">       cpu     = /cgroup/cpu;使用调度程序对cpu的使用控制</span><br><span class="line">       cpuacct = /cgroup/cpuacct;自动生成cgroup中的cpu使用的报告</span><br><span class="line">       memory  = /cgroup/memory;管理任务的内存</span><br><span class="line">       devices = /cgroup/devices;允许或拒绝cgroup中的任务访问设备</span><br><span class="line">       freezer = /cgroup/freezer;挂起或者恢复任务</span><br><span class="line">       net_cls = /cgroup/net_cls;控制网络流量</span><br><span class="line">       blkio   = /cgroup/blkio;为块设备输入输出设置，比如物理设备(磁盘，usb等)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cpu限制"><a href="#cpu限制" class="headerlink" title="cpu限制"></a>cpu限制</h4><p>cgroup中对cpu资源控制的方式大约有三种：  </p><p>1.通过cpu子系统中的cpu quote方式</p><p>2.通过cpu子系统中的cpu share方式</p><p>3.通过cpuset子系统中的cpuset 将任务绑定到相应的cpu核上</p><p>cpuset的方式是限定任务可以在哪些cpu上运行；cpu share的方式，是在控制群组中设置权重，通过权重和任务等来分配能够使用cpu的资源；</p><h6 id="通过cpu-quote方式来限制"><a href="#通过cpu-quote方式来限制" class="headerlink" title="通过cpu quote方式来限制"></a>通过cpu quote方式来限制</h6><p>启动cgroup服务后，可以在/cgroup/cpu目录下看到如下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">total 0</span><br><span class="line">--w--w--w- 1 root   root   0 Jul 26 11:44 cgroup.event_control</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 cgroup.procs</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 cpu.cfs_period_us</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 cpu.cfs_quota_us</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 cpu.rt_period_us</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 cpu.rt_runtime_us</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 cpu.shares</span><br><span class="line">-r--r--r-- 1 root   root   0 Jul 26 11:44 cpu.stat</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 notify_on_release</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 release_agent</span><br><span class="line">-rw-r--r-- 1 root   root   0 Jul 26 11:44 tasks</span><br></pre></td></tr></table></figure><p>这里做一下说明：</p><p>cpu.cfs_period_us： 单位是微秒，最大值是1s，最小值是1毫秒(ms),取值范围为1000-1000000</p><p>cpu.cfs_quota_us 单位是微秒，意思是在 cpu.cfs_period_us的时间内，用户可以占用的时间。对于单核来说，最大等于 cpu.cfs_period_us的值，对于多核来说，可以理解为最多可使用的cpu核数</p><p>cpu.stat:</p><p>nr_periods 时间间隔， 指经过了多少个cpu.cfs_period_us的时间间隔 nr_throttled 被限制运行的次数 throttled_time 总共被限制的时间，微秒</p><p>在多核的系统中， cpu.cfs_quota_us/cpu.cfs_period_us 的值就是可以使用的最大的cpu的核数</p><p>tasks 将需要控制的任务的id写入到tasks文件中，就可以控制资源了</p><h6 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h6><p>cpu限制也有分组、分层的概念，<br>如： /cgroup/cpu  这是cpu的根级，默认不限制cpu使用量，<br>  /cgroup/cpu/yarn 这是cpu下的一层，也是一个组，他的cpu使用量不能大于上一层设置。<br>  还可以在/cgroup/cpu/yarn 下创建其他层。</p><h6 id="进程添加到控制组"><a href="#进程添加到控制组" class="headerlink" title="进程添加到控制组"></a>进程添加到控制组</h6><ol><li>单一pid添加到某个控制组<br> echo pid &gt; /cgroup/cpu/yarn/tasks</li><li>cgrule服务<br>用法：  </li></ol><p>user hierarchies control_group<br>user:command hierarchies control_group<br>当在user 使用前缀时代表是一个组群而不是单独用户例如@admins 是admins组群中的所有用户<br>cgrule配置文件在/etc/cgrule.conf,配置好启动服务后就可以根据规则自动将任务附加到控制群组了。</p><p>如：<br>vim /etc/cgrule.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Example:</span><br><span class="line">#&lt;user&gt;         &lt;controllers&gt;   &lt;destination&gt;</span><br><span class="line">#@student       cpu,memory      usergroup/student/</span><br><span class="line">#peter          cpu             test1/</span><br><span class="line">#%              memory          test2/</span><br><span class="line">rd           cpu             yarn     # rd 用户所有进程的cpu限制都在yarn这个组里</span><br><span class="line">@hadoopcpuyarn  # hadoop 组里所有用户的进程cpu限制都在yarn这个组里</span><br><span class="line">mtime:scpcpuyarn  # mtime的scp命令的cpu限制在yarn这个组里</span><br></pre></td></tr></table></figure><p>启动服务：  </p><p>/etc/init.d/cgred restart  </p><ol start="3"><li>cgexec 命令启动服务<br>用法：<br>cgexec -g subsystems:path_to_cgroup command arguments<br>如：<br>cgexec -g cpu:yarn yarn-daemon.sh start nodemanager</li></ol><h3 id="redhat-cgroup"><a href="#redhat-cgroup" class="headerlink" title="redhat cgroup"></a>redhat cgroup</h3><p>关于其他资源 如 memory、network等限制，可以参考 radhat cgroup的介绍<br>地址：<br>centos 6<br> <a href="https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/6/html-single/Resource_Management_Guide/index.html#chap-Introduction_to_Control_Groups" target="_blank" rel="noopener">https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/6/html-single/Resource_Management_Guide/index.html#chap-Introduction_to_Control_Groups</a></p><p>centos 7<br><a href="https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/7/html-single/Resource_Management_Guide/index.html#chap-Introduction_to_Control_Groups" target="_blank" rel="noopener">https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/7/html-single/Resource_Management_Guide/index.html#chap-Introduction_to_Control_Groups</a></p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cgroup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kafka修改分区和副本数</title>
      <link href="/2018/06/19/kafka%E4%BF%AE%E6%94%B9%E5%88%86%E5%8C%BA%E5%92%8C%E5%89%AF%E6%9C%AC%E6%95%B0/"/>
      <url>/2018/06/19/kafka%E4%BF%AE%E6%94%B9%E5%88%86%E5%8C%BA%E5%92%8C%E5%89%AF%E6%9C%AC%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>##kafka修改分区和副本数 </p><p>查看现在副本分配情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">../bin/kafka-topics.sh --zookeeper 127.0.0.1:2181 --describe  --topic test1</span><br><span class="line"></span><br><span class="line">Topic:test1       PartitionCount:3        ReplicationFactor:2     Configs:</span><br><span class="line">        Topic: test1      Partition: 0    Leader: 2       Replicas: 2,4   Isr: 2,4</span><br><span class="line">        Topic: test1      Partition: 1    Leader: 3       Replicas: 3,5   Isr: 3,5</span><br><span class="line">        Topic: test1      Partition: 2    Leader: 4       Replicas: 4,1   Isr: 4,1</span><br></pre></td></tr></table></figure><h3 id="topic-分区扩容"><a href="#topic-分区扩容" class="headerlink" title="topic 分区扩容"></a>topic 分区扩容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --zookeeper 127.0.0.1:2181 -alter --partitions 4 --topic test1</span><br></pre></td></tr></table></figure><h3 id="修改备份数量"><a href="#修改备份数量" class="headerlink" title="修改备份数量"></a>修改备份数量</h3><h4 id="这个文件自己创建-格式按照下面的格式就可以了"><a href="#这个文件自己创建-格式按照下面的格式就可以了" class="headerlink" title="这个文件自己创建 格式按照下面的格式就可以了"></a>这个文件自己创建 格式按照下面的格式就可以了</h4><p>根据topic的分区情况自行修改 partitions-topic.json 文件配置  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;partitions&quot;:</span><br><span class="line">                [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;topic&quot;: &quot;test1&quot;,</span><br><span class="line">                        &quot;partition&quot;: 0,</span><br><span class="line">                        &quot;replicas&quot;: [1,2]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;topic&quot;: &quot;test1&quot;,</span><br><span class="line">                        &quot;partition&quot;: 1,</span><br><span class="line">                        &quot;replicas&quot;: [0,3]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;topic&quot;: &quot;test1&quot;,</span><br><span class="line">                        &quot;partition&quot;: 2,</span><br><span class="line">                        &quot;replicas&quot;: [4,5]</span><br><span class="line">                &#125;</span><br><span class="line">                ],</span><br><span class="line">        &quot;version&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行副本搬迁"><a href="#执行副本搬迁" class="headerlink" title="执行副本搬迁"></a>执行副本搬迁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../bin/kafka-reassign-partitions.sh --zookeeper 127.0.0.1:2181 --reassignment-json-file partitions-topic.json --execute</span><br></pre></td></tr></table></figure><h4 id="查看迁移情况："><a href="#查看迁移情况：" class="headerlink" title="查看迁移情况："></a>查看迁移情况：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">../bin/kafka-reassign-partitions.sh --zookeeper 127.0.0.1:2181 --reassignment-json-file partitions-topic.json --verify</span><br><span class="line"></span><br><span class="line">Status of partition reassignment:</span><br><span class="line">Reassignment of partition [mx_prd_nginx_access,0] is still in progress</span><br><span class="line">Reassignment of partition [mx_prd_nginx_access,1] completed successfully</span><br><span class="line">Reassignment of partition [mx_prd_nginx_access,2] is still in progress</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>kafka-reassign-partitions.sh工具来重新分布分区。该工具有三种使用模式：  </p><ol><li>generate模式，给定需要重新分配的Topic，自动生成reassign plan（并不执行）</li><li>execute模式，根据指定的reassign plan重新分配Partition</li><li>verify模式，验证重新分配Partition是否成功</li></ol>]]></content>
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker搭建macvlan网络</title>
      <link href="/2018/06/14/docker%E6%90%AD%E5%BB%BAmacvlan%E7%BD%91%E7%BB%9C/"/>
      <url>/2018/06/14/docker%E6%90%AD%E5%BB%BAmacvlan%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<h2 id="docker-搭建macvlan-网络"><a href="#docker-搭建macvlan-网络" class="headerlink" title="docker 搭建macvlan 网络"></a>docker 搭建macvlan 网络</h2><p>  简单说，macvlan就是在宿主的网卡设置多个vlan信息，根据走的网卡不同，并带有不行的vlan标记。  </p><h3 id="交换机需要支持"><a href="#交换机需要支持" class="headerlink" title="交换机需要支持"></a>交换机需要支持</h3><p>macvlan需要交换机上有几个设置：  </p><ul><li>连接宿主的交换机接口需要改为 Trunk 模式。（这样才能多vlan通过这个口通讯）</li><li>交换机上添加macvlan设置的相应vlan信息。</li><li>三层交换机上设置各个vlan的网关地址。并实现vlan间互联。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>环境介绍  </p><table><thead><tr><th>宿主机IP</th><th>宿主机vlan</th><th>macvlan IP</th><th>vlan 号</th></tr></thead><tbody><tr><td>192.168.53.11</td><td>233</td><td>172.20.30.x</td><td>30</td></tr><tr><td>192.168.53.12</td><td>233</td><td>172.20.19.x</td><td>19</td></tr></tbody></table><h4 id="实时生效安装"><a href="#实时生效安装" class="headerlink" title="实时生效安装"></a>实时生效安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y vconfig</span><br><span class="line">加载模块哦</span><br><span class="line">modprobe 8021q</span><br><span class="line">lsmod |grep -i 8021q</span><br><span class="line">网卡开启混合模式</span><br><span class="line">ip link set em1 promisc on</span><br><span class="line">使用vconfig命令配置vlan </span><br><span class="line">vconfig add em1 233 </span><br><span class="line">vconfig add em1 30   # 另外一台设置  vconfig add em1 19</span><br><span class="line">在em1接口上配置两个VLAN </span><br><span class="line">vconfig set_flag em1.233 1 1 </span><br><span class="line">vconfig set_flag em1.30 1 1   # 另外一台 vconfig set_flag em1.19 1 1</span><br><span class="line"></span><br><span class="line">ifconfig em1 0.0.0.0 </span><br><span class="line">ifconfig em1.233 192.168.53.11 netmask 255.255.255.0 up </span><br><span class="line">ifconfig em1.30 172.20.30.2 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure><p>这样一个临时配置就可以了， 配置docker的网络就可以，docker配置网络的命令后面一起发吧，  </p><p>上面属于临时配置，机器重启配置就没有了，不适合生产。</p><h4 id="永久配置"><a href="#永久配置" class="headerlink" title="永久配置"></a>永久配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">um install -y epel-release</span><br><span class="line">yum install -y vconfig</span><br></pre></td></tr></table></figure><p>添加模块<br>vim /etc/rc.d/rc.local 添加  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sbin/modprobe 8021q</span><br></pre></td></tr></table></figure><p>网卡开启混合模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;PROMISC=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-em1</span><br></pre></td></tr></table></figure><p>修改王凯配置文件<br>vim /etc/sysconfig/network-scripts/ifcfg-em1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=em1</span><br><span class="line">NAME=em1</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">BONDING_MASTER=yes</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=none</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PROMISC=yes</span><br></pre></td></tr></table></figure><p>生成 macvlan 网卡</p><p>vim /etc/sysconfig/network-scripts/ifcfg-em1.233</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=em1.233</span><br><span class="line">NAME=em1.233</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.53.11</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.53.1</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">VLAN=yes</span><br><span class="line">NM_CONTROLLED=no</span><br></pre></td></tr></table></figure><p>vim /etc/sysconfig/network-scripts/ifcfg-em1.30</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=em1.30</span><br><span class="line">NAME=em1.30</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">VLAN=yes</span><br><span class="line">NM_CONTROLLED=no</span><br></pre></td></tr></table></figure><p>另外一台 其他配置都一样， ifcfg-em1.30 网卡信息修改为 ifcfg-em1.19 即可。  </p><p>之后重启网卡，如果配置没有问题，网络是可以连接的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure><p>以后新添加vlan的时候，也可以先做好配置文件。直接ifup即可。<br>ifup /etc/sysconfig/network-scripts/ifcfg-em1.19</p><p>网络信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@wd-slave01 ~]# ifconfig</span><br><span class="line">em1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::d6be:d9ff:feae:80cf  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether d4:be:d9:ae:80:cf  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 108408  bytes 17234693 (16.4 MiB)</span><br><span class="line">        RX errors 0  dropped 11508  overruns 0  frame 0</span><br><span class="line">        TX packets 24225  bytes 4849942 (4.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">        </span><br><span class="line">docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0</span><br><span class="line">        inet6 fe80::42:87ff:fecd:c222  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 02:42:87:cd:c2:22  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 458940  bytes 71009715 (67.7 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 198525  bytes 55224280 (52.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">em1.233: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.53.12  netmask 255.255.255.0  broadcast 192.168.53.255</span><br><span class="line">        inet6 fe80::d6be:d9ff:feae:80cf  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether d4:be:d9:ae:80:cf  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 108408  bytes 17234693 (16.4 MiB)</span><br><span class="line">        RX errors 0  dropped 11508  overruns 0  frame 0</span><br><span class="line">        TX packets 24225  bytes 4849942 (4.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">em1.30: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::d6be:d9ff:feae:80cf  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether d4:be:d9:ae:80:cf  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 2133458  bytes 245138875 (233.7 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1343034  bytes 151915911 (144.8 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h4 id="docker-配置网络"><a href="#docker-配置网络" class="headerlink" title="docker 配置网络"></a>docker 配置网络</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=172.20.30.0 --gateway=172.20.30.1 -o parent=em1.30 mac_net1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network ls   查看网络情况    </span><br><span class="line">docker network inspect 074ebc238447  查看网络详细信息及ip地址分配清凉</span><br></pre></td></tr></table></figure><p>启动容器   指定IP 指定网络  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name test1 --ip=172.55.55.10 --network mac_net1 nginx-nettools:1.13  </span><br><span class="line">或动态分配</span><br><span class="line">docker run -d --name test2  --network mac_net1 nginx-nettools:1.13</span><br></pre></td></tr></table></figure><p>限制分配ip地址池</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=172.20.30.0/24 --gateway=172.20.30.1 --ip-range=172.20.30.48/30 -o parent=em1.20 mac_net30</span><br><span class="line">这样只能分配4个ip地址</span><br><span class="line">172.20.30.128/25 也就是 128-255 可得 128个ip地址</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> macvlan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux 删除乱码文件</title>
      <link href="/2018/06/04/linux-%E5%88%A0%E9%99%A4%E4%B9%B1%E7%A0%81%E6%96%87%E4%BB%B6/"/>
      <url>/2018/06/04/linux-%E5%88%A0%E9%99%A4%E4%B9%B1%E7%A0%81%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="linux-利用-inum-删除乱码文件"><a href="#linux-利用-inum-删除乱码文件" class="headerlink" title="linux 利用 inum 删除乱码文件"></a>linux 利用 inum 删除乱码文件</h2><p>  当系统中产生一些乱码文件的时候，rm直接是删除不掉的。如 “-，&amp;”等一些特殊字符。<br>  这时候我们可以利用linux 的inum 号来找到这个文件，并删除。</p><p>  例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@test00 ~]# ll -i</span><br><span class="line">总用量 4</span><br><span class="line">   213388 -rw-r--r--. 1 root root    0 6月   4 07:40 -c</span><br><span class="line">134938544 drwxr-xr-x. 2 root root   23 12月 18 05:12 123</span><br><span class="line">   213391 -rw-r--r--. 1 root root    0 6月   4 07:40 --poolmetadata</span><br><span class="line">   213390 -rw-r--r--. 1 root root    0 6月   4 07:40 --thinpool</span><br><span class="line">   213387 -rw-r--r--. 1 root root    0 6月   4 07:40 --zero</span><br></pre></td></tr></table></figure><p>利用inum 号删除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">删除文件或文件夹</span><br><span class="line">find ./ -inum 213388 -print -exec rm &#123;&#125; -rf \;</span><br><span class="line">删除文件</span><br><span class="line">find ./ -inum 213388 -delete;</span><br></pre></td></tr></table></figure><p>也可以重命名乱码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -inum 213388 -exec mv &#123;&#125; newfile \;</span><br></pre></td></tr></table></figure><p>文件名字就改为了 newfile</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> rm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>logstash out file to HDFS</title>
      <link href="/2018/05/29/logstash-out-file-to-HDFS/"/>
      <url>/2018/05/29/logstash-out-file-to-HDFS/</url>
      <content type="html"><![CDATA[<h2 id="logstash-out-file-to-HDFS"><a href="#logstash-out-file-to-HDFS" class="headerlink" title="logstash out file to HDFS"></a>logstash out file to HDFS</h2><p>  logstash 直接把文件内容写入 hdfs 中， 并支持 hdfs 压缩格式。<br>  logstash 需要安装第三方插件，webhdfs插件，通过hdfs的web接口写入。<br>  即 <a href="http://namenode00:50070/webhdfs/v1/" target="_blank" rel="noopener">http://namenode00:50070/webhdfs/v1/</a>  接口  </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>  可以在官网找到相应的版本， 我们用的是2.3.1，下载地址：  </p><pre><code>https://www.elastic.co/downloads/past-releases  </code></pre><p>  webhdfs插件地址  </p><pre><code>github地址：  git clone  https://github.com/heqin5136/logstash-output-webhdfs-discontinued.git官网地址及使用说明：  https://www.elastic.co/guide/en/logstash/current/plugins-outputs-webhdfs.html</code></pre><p>插件安装方式：</p><pre><code>logstash 安装在 /home/mtime/logstash-2.3.1git clone  https://github.com/heqin5136/logstash-output-webhdfs-discontinued.gitcd logstash-output-webhdfs-discontinued/home/mtime/logstash-2.3.1/bin/plugin install logstash-output-webhdfs-discontinued</code></pre><p>检查hdfs的webhds接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   curl -i  &quot;http://namenode:50070/webhdfs/v1/?user.name=hadoop&amp;op=LISTSTATUS&quot;   </span><br><span class="line">   </span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Expires: Thu, 13 Jul 2017 04:53:39 GMT</span><br><span class="line">Date: Thu, 13 Jul 2017 04:53:39 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Expires: Thu, 13 Jul 2017 04:53:39 GMT</span><br><span class="line">Date: Thu, 13 Jul 2017 04:53:39 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Set-Cookie: hadoop.auth=&quot;u=hadoop&amp;p=hadoop&amp;t=simple&amp;e=1499957619679&amp;s=KSxdSAtjXAllhn73vh1MAurG9Bk=&quot;; Path=/; Expires=Thu, 13-Jul-2017 14:53:39 GMT; HttpOnly</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Server: Jetty(6.1.26)</span><br></pre></td></tr></table></figure><p>注释： active namenode 返回是200 ，standby namenode 返回是403.</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>添加 logstash 一个配置文件</p><p>vim /home/mtime/logstash-2.3.1/conf/hdfs.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    zk_connect =&gt; &quot;192.168.51.191:2181,192.168.51.192:2181,192.168.51.193:2181&quot;   ## kafka zk 地址 </span><br><span class="line">    group_id =&gt; &apos;hdfs&apos;   # 消费者组</span><br><span class="line">    topic_id =&gt; &apos;tracks&apos;  # topic 名字</span><br><span class="line">    consumer_threads =&gt; 1  </span><br><span class="line">    codec =&gt; &apos;json&apos;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;   ##  为解决 插入hdfs时间相差8小时， </span><br><span class="line">        date &#123;  </span><br><span class="line">                match =&gt; [ &quot;time&quot; , &quot;yyyy-MM-dd HH:mm:ss&quot; ]</span><br><span class="line">                locale =&gt; &quot;zh&quot;</span><br><span class="line">                timezone =&gt; &quot;-00:00:00&quot;</span><br><span class="line">                target =&gt; &quot;@timestamp&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">#if [app] == &quot;mx.tc.virtualcard.service&quot; &#123;</span><br><span class="line">    webhdfs &#123;</span><br><span class="line">           workers =&gt; 2</span><br><span class="line">           host =&gt; &quot;192.168.53.101&quot;</span><br><span class="line">           standby_host =&gt; &quot;192.168.53.100&quot;</span><br><span class="line">           port =&gt; 50070</span><br><span class="line">           user =&gt; &quot;loguser&quot;</span><br><span class="line">           path =&gt; &quot;/Service-Data/%&#123;+YYYY&#125;-%&#123;+MM&#125;-%&#123;+dd&#125;/%&#123;app&#125;/logstash-%&#123;+HH&#125;.log&quot;</span><br><span class="line">           flush_size =&gt; 100</span><br><span class="line">           idle_flush_time =&gt; 10</span><br><span class="line">           compression =&gt; &quot;gzip&quot;</span><br><span class="line">           retry_interval =&gt; 3</span><br><span class="line">           codec =&gt; &apos;json&apos;   # 解决 写入hdfs文件是json格式，否则内容为 %&#123;message&#125;</span><br><span class="line">       &#125;</span><br><span class="line">#   &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于hdfs部分配置，可以在 <a href="https://www.elastic.co/guide/en/logstash/current/plugins-outputs-webhdfs.html" target="_blank" rel="noopener">plugins-outputs-webhdfs</a>  官网找到。</p><h3 id="启动-logstart"><a href="#启动-logstart" class="headerlink" title="启动 logstart"></a>启动 logstart</h3><pre><code>cd /home/mtime/logstash-2.3.1/bin/./logstash -f ../conf/hdfs.conf    # 为前台启动 </code></pre>]]></content>
      
      <categories>
          
          <category> logstash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> logstash </tag>
            
            <tag> hdfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mesos容器映射端口限制</title>
      <link href="/2018/05/29/mesos%E5%AE%B9%E5%99%A8%E6%98%A0%E5%B0%84%E7%AB%AF%E5%8F%A3%E9%99%90%E5%88%B6/"/>
      <url>/2018/05/29/mesos%E5%AE%B9%E5%99%A8%E6%98%A0%E5%B0%84%E7%AB%AF%E5%8F%A3%E9%99%90%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="mesos-容器映射端口限制"><a href="#mesos-容器映射端口限制" class="headerlink" title="mesos 容器映射端口限制"></a>mesos 容器映射端口限制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  mesos 在启动容器的时候，理念是容器内的端都映射到宿主的随机端口。<br>  在容器的时代，其实这样的理念是很好，当容器多的时候，固定端口肯定是有一定的局限性的。可以通过注册中心、mesos-dns、marathon-lb等服务来找到你要的服务地址和端口。<br>  但是有时候有一些服务需要一些固定端口。比如cadvisor、还有我们自己写的容器，可能会映射一些其他端口。  </p><h3 id="默认端口限制"><a href="#默认端口限制" class="headerlink" title="默认端口限制"></a>默认端口限制</h3><p>  默认mesos的端口也是可以指定的，只是范围比较小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31000 - 32000</span><br></pre></td></tr></table></figure><p>  marahotn 的json 文件中，你可以写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;portMappings&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;containerPort&quot;: 80,</span><br><span class="line">    &quot;hostPort&quot;: 31000,  # 一般设置 0 为随机端口，</span><br><span class="line">    &quot;servicePort&quot;: 0,</span><br><span class="line">    &quot;protocol&quot;: &quot;tcp&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>docker 启动时候就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test00 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                            NAMES</span><br><span class="line">70314cd31714        nginx-nettools:1.13   &quot;nginx -g &apos;daemon ...&quot;   24 minutes ago      Up 24 minutes       443/tcp, 0.0.0.0:31000-&gt;80/tcp   mesos-07a768f1-f635-4517-9b60-4e86bfef658e</span><br></pre></td></tr></table></figure><h3 id="配置mesos"><a href="#配置mesos" class="headerlink" title="配置mesos"></a>配置mesos</h3><p>yum 安装的meoss 添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;ports(*):[1024-65534]&quot; &gt; /etc/mesos-slave/resources</span><br></pre></td></tr></table></figure><p>重启 mesos-slave 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mesos-slave</span><br></pre></td></tr></table></figure><p>二进制安装的mesos 在启动命令中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--resources=ports(*):[1024-65534]</span><br></pre></td></tr></table></figure><p>这样你的端口就是在 1024 - 65524 中间随意指定了。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>marathon json文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;portMappings&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;containerPort&quot;: 80,</span><br><span class="line">    &quot;hostPort&quot;: 8080,</span><br><span class="line">    &quot;servicePort&quot;: 0,</span><br><span class="line">    &quot;protocol&quot;: &quot;tcp&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>docker 启动时候是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test00 ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                           NAMES</span><br><span class="line">1235513ee658        nginx-nettools:1.13   &quot;nginx -g &apos;daemon ...&quot;   6 minutes ago       Up 6 minutes        443/tcp, 0.0.0.0:8080-&gt;80/tcp   mesos-655d4923-0d1f-4130-8d61-aab824df3f25-S13.9e0c2cfb-3d07-467f-ac47-08e492703263</span><br></pre></td></tr></table></figure><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>如果mesos上运行过容器，在你修改配置文件之后重启会有问题。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你可以通过</span><br><span class="line">journalctl -xe</span><br><span class="line">或</span><br><span class="line">查看mesos的log日志 找到问题</span><br></pre></td></tr></table></figure><p>解决方法： 日志中会有提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">To remedy this do as follows:</span><br><span class="line">Step 1: rm -f /home/mtime/mesos/meta/slaves/latest</span><br><span class="line">        This ensures agent doesn&apos;t recover old live executors.</span><br><span class="line">  ep 2: Restart the agent.</span><br></pre></td></tr></table></figure><p>rm -f /home/mtime/mesos/meta/slaves/latest<br>删除之后在重启即可。</p>]]></content>
      
      <categories>
          
          <category> mesos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mesos </tag>
            
            <tag> port </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>marathon私有仓库用户名和密码方式</title>
      <link href="/2018/05/28/marathon%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/05/28/marathon%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="marathon-使用仓库用户名和密码方式"><a href="#marathon-使用仓库用户名和密码方式" class="headerlink" title="marathon 使用仓库用户名和密码方式"></a>marathon 使用仓库用户名和密码方式</h1><h2 id="首先需要本地手动登入镜像仓库。"><a href="#首先需要本地手动登入镜像仓库。" class="headerlink" title="首先需要本地手动登入镜像仓库。"></a>首先需要本地手动登入镜像仓库。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># docker login registry.inc-test.com</span><br><span class="line">   Username: admin </span><br><span class="line">   Password: Default@123</span><br></pre></td></tr></table></figure><p>登入成功之后会在当前用户的家目录创建一个隐藏目录 ~/.docker ，打包这么目录，放在一个目录下， 并让marathon启动容器的时候引用这个文件即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cd ~</span><br><span class="line"># tar czf docker.tar.gz .docker</span><br><span class="line"></span><br><span class="line"># cp docker.tar.gz /etc/</span><br></pre></td></tr></table></figure><h2 id="marathon-json-启动容器引用验证文件"><a href="#marathon-json-启动容器引用验证文件" class="headerlink" title="marathon json 启动容器引用验证文件"></a>marathon json 启动容器引用验证文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;uris&quot;: [</span><br><span class="line">   &quot;file:///etc/docker.tar.gz&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注释：  </p><ul><li>这样需要每台mesos slave机器都需要放置这个文件，实际操作很不灵活，</li><li>而且用户切换也不好做，每台机器需要放不不用户的验证文件。</li><li>如果用户密码修改，还需要批量修改每台slave机器上的验证文件。</li></ul><h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><ul><li>把这个文件放在http页面上，只要网络通就可以访问，不需要每台机器都配置验证文件，修改也比较访问。</li></ul><p>把docker.tar.gz文件放在http页面中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/docker.tar.gz 10.10.130.201:/var/www/html/download/docker_img/harbor-admin.tar.gz</span><br><span class="line"></span><br><span class="line"># 一个用户手动生成一个文件，如需要切换用户的时候指定不同文件即可。</span><br></pre></td></tr></table></figure><h2 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;nginx&quot;,</span><br><span class="line">    &quot;cpus&quot;: 0.2,</span><br><span class="line">    &quot;mem&quot;: 128,</span><br><span class="line">    &quot;instances&quot;: 1,</span><br><span class="line">    &quot;constraints&quot;: [</span><br><span class="line">        [</span><br><span class="line">            &quot;hostname&quot;,</span><br><span class="line">            &quot;CLUSTER&quot;,</span><br><span class="line">            &quot;es02.host-test.com&quot;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    &quot;uris&quot;: [</span><br><span class="line">        &quot;http://10.10.130.201/download/docker_img/harbor-admin.tar.gz&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;container&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;DOCKER&quot;,</span><br><span class="line">        &quot;docker&quot;: &#123;</span><br><span class="line">            &quot;image&quot;: &quot;registry.inc-test.com/web-lb/nginx:1.13&quot;,</span><br><span class="line">            &quot;network&quot;: &quot;BRIDGE&quot;,</span><br><span class="line">            &quot;portMappings&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;containerPort&quot;: 80,</span><br><span class="line">                    &quot;hostPort&quot;: 31009,</span><br><span class="line">                    &quot;servicePort&quot;: 0,</span><br><span class="line">                    &quot;protocol&quot;: &quot;tcp&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>marathon 官网说明 <a href="https://mesosphere.github.io/marathon/docs/native-docker-private-registry.html" target="_blank" rel="noopener">https://mesosphere.github.io/marathon/docs/native-docker-private-registry.html</a></p>]]></content>
      
      <categories>
          
          <category> marathon </category>
          
      </categories>
      
      
        <tags>
            
            <tag> marathon </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mesos解决sandbox日志切分问题</title>
      <link href="/2018/05/28/mesos%E8%A7%A3%E5%86%B3sandbox%E6%97%A5%E5%BF%97%E5%88%87%E5%88%86%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/28/mesos%E8%A7%A3%E5%86%B3sandbox%E6%97%A5%E5%BF%97%E5%88%87%E5%88%86%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="mesos-解决sandbox日志切分问题"><a href="#mesos-解决sandbox日志切分问题" class="headerlink" title="mesos 解决sandbox日志切分问题"></a>mesos 解决sandbox日志切分问题</h1><p>mesos运行的docker容器，容器打印到前台console的日志会记录到mesos的work目录中容器沙箱中stdout和stderr文件中，容器不重启，日志会一直变大，这样会到只宿主空间变大。  </p><p>另外这份日志还会日志到系统的/var/log/messages 文件中。  </p><p>首先关于 mesos-slave 的 work-dir 中设置的目录，里面存放的docker容器的沙箱目录，会有 stderr\stdout等文件，其中这两个文件是记录容器console的日志，会一直保留，直到容器销毁，这样日志文件会持续增大。</p><p>为解决这个问题问题。mesos 没有明确的配置。 <a href="http://mesos.apache.org/documentation/latest/logging/" target="_blank" rel="noopener">http://mesos.apache.org/documentation/latest/logging/</a> 文章中有提到沙箱大小的设置，但是没有测试成功。</p><p>我的解决办法：利用系统的 logrotate 模块做日志的切分和删除。</p><p>如：添加配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/logrotate.d/mesos  &lt;&lt; EOF</span><br><span class="line">/home/mtime/mesos/slaves/*/frameworks/*/executors/*/runs/latest/stderr</span><br><span class="line">/home/mtime/mesos/slaves/*/frameworks/*/executors/*/runs/latest/stdout </span><br><span class="line">&#123;</span><br><span class="line">        daily</span><br><span class="line">        missingok</span><br><span class="line">        copytruncate</span><br><span class="line">        notifempty</span><br><span class="line">        size 102400</span><br><span class="line">        dateext</span><br><span class="line">        rotate 7</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>这样每天都会切分 大于 100Mb的日志了， 并保留7天。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/logrotate -d -v -f /etc/logrotate.conf</span><br><span class="line"></span><br><span class="line">-d  测试配置文件，不是真正执行。</span><br></pre></td></tr></table></figure><p>crontab  中 已经添加，logrotate 会每天执行的。/etc/cron.daily/logrotate </p>]]></content>
      
      <categories>
          
          <category> mesos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mesos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>marathon-lb配置及nginx负载</title>
      <link href="/2018/05/28/marathon-lb%E9%85%8D%E7%BD%AE%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD/"/>
      <url>/2018/05/28/marathon-lb%E9%85%8D%E7%BD%AE%E5%8F%8Anginx%E8%B4%9F%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h1 id="marathon-lb配置"><a href="#marathon-lb配置" class="headerlink" title="marathon-lb配置"></a>marathon-lb配置</h1><h2 id="marathon-lb-get-images"><a href="#marathon-lb-get-images" class="headerlink" title="marathon-lb get images"></a>marathon-lb get images</h2><p>Marathon-lb既是一个服务发现工具，也是负载均衡工具，它集成了haproxy，自动获取各个app的信息，为每一组app生成haproxy配置，通过servicePort或者web虚拟主机提供服务。</p><p>要使用marathonn-lb，每组app必须设置HAPROXY_GROUP标签。</p><p>Marathon-lb运行时绑定在各组app定义的服务端口（servicePort，如果app不定义servicePort，marathon会随机分配端口号）上，可以通过marathon-lb所在节点的相关服务端口访问各组app。</p><p>例如：marathon-lb部署在slave5，test-app 部署在slave1，test-app 的servicePort是10004，那么可以在slave5的 10004端口访问到test-app提供的服务。</p><p>由于servicePort 非80、443端口（80、443端口已被marathon-lb中的 haproxy独占），对于web服务来说不太方便，可以使用 haproxy虚拟主机解决这个问题：</p><p>在提供web服务的app配置里增加HAPROXY_{n}_VHOST（WEB虚拟主机）标签，marathon-lb会自动把这组app的WEB集群服务发布在marathon-lb所在节点的80和443端口上，用户设置DNS后通过虚拟主机名来访问。</p><h3 id="官方下载镜像"><a href="#官方下载镜像" class="headerlink" title="官方下载镜像"></a>官方下载镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">images url :</span><br><span class="line">https://store.docker.com/community/images/mesosphere/marathon-lb</span><br><span class="line"></span><br><span class="line">docker pull mesosphere/marathon-lb</span><br><span class="line"></span><br><span class="line">github url:</span><br><span class="line">https://github.com/mesosphere/marathon-lb</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged -e PORTS=9090 --net=host docker.io/mesosphere/marathon-lb sse -m http://marathon1_ip:8080 -m http://marathon2_ip:8080 -m http://master3_ip:8080  --group external</span><br></pre></td></tr></table></figure><p>marathon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vim marathon-lb.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;marathon-lb-testv1&quot;,</span><br><span class="line">    &quot;instances&quot;: 1,</span><br><span class="line">    &quot;constraints&quot;: [</span><br><span class="line">        [</span><br><span class="line">            &quot;hostname&quot;,</span><br><span class="line">            &quot;CLUSTER&quot;,</span><br><span class="line">            &quot;host-hostname.com&quot;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    &quot;container&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;DOCKER&quot;,</span><br><span class="line">        &quot;docker&quot;: &#123;</span><br><span class="line">            &quot;image&quot;: &quot;docker.io/mesosphere/marathon-lb:latest&quot;,</span><br><span class="line">            &quot;privileged&quot;: true,</span><br><span class="line">            &quot;network&quot;: &quot;HOST&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;args&quot;: [</span><br><span class="line">        &quot;sse&quot;,</span><br><span class="line">        &quot;-m&quot;,</span><br><span class="line">        &quot;http://10.10.131.78:8080&quot;,</span><br><span class="line">        &quot;--group&quot;,</span><br><span class="line">        &quot;external&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -X POST http://10.10.131.78:8080/v2/apps -d @marathon-lb.json -H &quot;Content-type: application/json&quot;</span><br></pre></td></tr></table></figure><h2 id="marathon-lb-API"><a href="#marathon-lb-API" class="headerlink" title="marathon-lb API"></a>marathon-lb API</h2><table><thead><tr><th>Endpoint</th><th>Description</th></tr></thead><tbody><tr><td>:9090/haproxy?stats</td><td>HAProxy stats endpoint. This produces an HTML page which can be viewed in your browser, providing various statistics about the current HAProxy instance.</td></tr><tr><td>:9090/haproxy?stats;csv</td><td>This is a CSV version of the stats above, which can be consumed by other tools. For example, it’s used in the zdd.py script.</td></tr><tr><td>:9090/_haproxy_health_check</td><td>HAProxy health check endpoint. Returns 200 OK if HAProxy is healthy.</td></tr><tr><td>:9090/_haproxy_getconfig</td><td>Returns the HAProxy config file as it was when HAProxy was started. Implemented in getconfig.lua.</td></tr><tr><td>:9090/_haproxy_getvhostmap</td><td>Returns the HAProxy vhost to backend map. This endpoint returns HAProxy map file only when the –haproxy-map flag is enabled, it returns an empty string otherwise. Implemented in getmaps.lua.</td></tr><tr><td>:9090/_haproxy_getappmap</td><td>Returns the HAProxy app ID to backend map. Like _haproxy_getvhostmap, this requires the –haproxy-map flag to be enabled and returns an empty string otherwise. Also implemented in getmaps.lua.</td></tr><tr><td>:9090/_haproxy_getpids</td><td>Returns the PIDs for all HAProxy instances within the current process namespace. This literally returns $(pidof haproxy). Implemented in getpids.lua. This is also used by the zdd.py script to determine if connections have finished draining during a deploy.</td></tr><tr><td>:9090/_mlb_signal/hup*</td><td>Sends a SIGHUP signal to the marathon-lb process, causing it to fetch the running apps from Marathon and reload the HAProxy config as though an event was received from Marathon.</td></tr><tr><td>:9090/_mlb_signal/usr1*</td><td>Sends a SIGUSR1 signal to the marathon-lb process, causing it to restart HAProxy with the existing config, without checking Marathon for changes.</td></tr></tbody></table><ul><li>API from marathon-lb <a href="https://github.com/mesosphere/marathon-lb" target="_blank" rel="noopener">!github</a></li><li>marathon-lb 文档详解 <a href="https://github.com/mesosphere/marathon-lb/blob/master/Longhelp.md#templates" target="_blank" rel="noopener">!https://github.com/mesosphere/marathon-lb/blob/master/Longhelp.md#templates</a></li></ul><p>如常用： <a href="http://marathon-lb-ip:9090/haproxy?stats" target="_blank" rel="noopener">http://marathon-lb-ip:9090/haproxy?stats</a></p><h2 id="nginx-start"><a href="#nginx-start" class="headerlink" title="nginx start"></a>nginx start</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># vim nginx.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;nginx-test&quot;,</span><br><span class="line">    &quot;cpus&quot;: 0.2,</span><br><span class="line">    &quot;mem&quot;: 128,</span><br><span class="line">    &quot;instances&quot;: 1,</span><br><span class="line">  &quot;labels&quot;: &#123;</span><br><span class="line">     &quot;HAPROXY_GROUP&quot;:&quot;external&quot;</span><br><span class="line">     &quot;HAPROXY_0_VHOST&quot;:&quot;nginx.test.com&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">    &quot;uris&quot;: [</span><br><span class="line">        &quot;http://10.10.130.201/download/docker_img/db-harbor-admin.tar.gz&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;healthChecks&quot;: [&#123; &quot;path&quot;: &quot;/&quot; &#125;],</span><br><span class="line">    &quot;container&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;DOCKER&quot;,</span><br><span class="line">        &quot;docker&quot;: &#123;</span><br><span class="line">            &quot;image&quot;: &quot;nginx:1.13&quot;,</span><br><span class="line">            &quot;network&quot;: &quot;BRIDGE&quot;,</span><br><span class="line">            &quot;portMappings&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;containerPort&quot;: 80,</span><br><span class="line">                    &quot;hostPort&quot;: 0,</span><br><span class="line">                    &quot;servicePort&quot;: 10000,</span><br><span class="line">                    &quot;protocol&quot;: &quot;tcp&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># curl -X POST http://10.10.131.78:8080/v2/apps -d @nginx.json -H &quot;Content-type: application/json&quot;</span><br></pre></td></tr></table></figure><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><ol><li>一定要加上HAPROXY_GROUP标签，它填写的是marathon-lb创建时定义的组名 </li><li>HAPROXY_0_VHOST是标签名，对于web服务可以加上VHOST标签，让marathon-lb设置WEB虚拟主机；</li><li>containerPort为80,是指容器内的端口。</li><li>hostPort是当前主机映射到contenterPort的端口，如果hostPort为0的话,则说明是随机的。</li><li>serverPort是marathon-lb需要配置的haproxy代理暴露的端口,这里设置为10000，说明访问marathon-lb机器的10000端口就可为访问这个应用容器的80端口。</li></ol><h2 id="访问marathon-lb"><a href="#访问marathon-lb" class="headerlink" title="访问marathon-lb"></a>访问marathon-lb</h2><p>ip 访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://marathon-lb_ip:10000/</span><br></pre></td></tr></table></figure><ul><li>访问marathon-lb部署的宿主机ip地址和serverPort的端口。</li></ul><p>域名访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">需要添加dns解析，根据 &quot;HAPROXY_0_VHOST&quot;:&quot;nginx.test.com&quot; 设置的配置。</span><br><span class="line">如：</span><br><span class="line">vim /etc/hosts  添加</span><br><span class="line">10.10.131.151nginx.test.com</span><br><span class="line"></span><br><span class="line">这里 10.10.131.151 是 marathon-lb 的ip地址</span><br><span class="line"></span><br><span class="line">curl nginx.test.com  即可</span><br></pre></td></tr></table></figure><h2 id="marathon-lb-代理80端口"><a href="#marathon-lb-代理80端口" class="headerlink" title="marathon-lb 代理80端口"></a>marathon-lb 代理80端口</h2><p>默认marathon-lb 80和443端口是被占用的，所以nginx在发布的时候“serverPort”是不能设置为80和443端口的。  </p><p>为了解决这个问题，需要更改源码，重新生成镜像。  </p><p>首先现在 marathon-lb源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># git clone https://github.com/mesosphere/marathon-lb.git</span><br><span class="line"># cd marathon-lb</span><br><span class="line"></span><br><span class="line">在这个目录下找到所有80、443端口信息。改为其他端口</span><br><span class="line"></span><br><span class="line"># grep 80 . -R</span><br><span class="line">找到相应文件，80 替换为7080</span><br><span class="line">:%s/80/7080/g</span><br><span class="line"></span><br><span class="line">找到相应文件，443 替换为7443</span><br><span class="line">:%s/443/7443/g</span><br></pre></td></tr></table></figure><p>重新生成镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t marathon-lb-7080 .</span><br><span class="line"></span><br><span class="line">成功之后 docker images 就会多出 marathon-lb-7080 镜像</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> marathon </category>
          
      </categories>
      
      
        <tags>
            
            <tag> marathon </tag>
            
            <tag> marathon-lb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mesos-dns搭建</title>
      <link href="/2018/05/25/mesos-dns%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/05/25/mesos-dns%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="mesos-dns-搭建"><a href="#mesos-dns-搭建" class="headerlink" title="mesos-dns 搭建"></a>mesos-dns 搭建</h2><p>  Mesos-DNS用来支持Mesos集群上的服务发现，使运行在Mesos上的应用和服务可以通过域名服务器来发现彼此。你只要知道一个Mesos数据中心上运行的应用的名字，就可以通过Mesos-DNS查询到该应用的IP和端口号。  </p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>  官方下载mesos-dns镜像没有提供mesos-dns的HTTP接口出来，所以先用二进制搭建，在自己build镜像。  </p><p>  mesos-dns文件下载：<a href="https://github.com/mesosphere/mesos-dns/releases" target="_blank" rel="noopener">!https://github.com/mesosphere/mesos-dns/releases</a></p><p>  下载 mesos-dns-v0.6.0-linux-amd64 一个二进制文件。</p><p>  准备配置文件：config.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;zk&quot;: &quot;zk://10.0.0.52:2181,10.0.0.53:2181,10.0.0.54:2181/mesos&quot;,</span><br><span class="line">  &quot;masters&quot;: [&quot;10.0.0.52:5050&quot;, &quot;10.0.0.53:5050&quot;, &quot;10.0.0.54:5050&quot;],</span><br><span class="line">  &quot;refreshSeconds&quot;: 10,</span><br><span class="line">  &quot;ttl&quot;: 0,</span><br><span class="line">  &quot;domain&quot;: &quot;mesos&quot;,</span><br><span class="line">  &quot;port&quot;: 53,</span><br><span class="line">  &quot;resolvers&quot;: [&quot;10.10.130.5&quot;],</span><br><span class="line">  &quot;timeout&quot;: 5, </span><br><span class="line">  &quot;httpon&quot;: true,</span><br><span class="line">  &quot;dnson&quot;: true,</span><br><span class="line">  &quot;httpport&quot;: 8123,</span><br><span class="line">  &quot;externalon&quot;: true,</span><br><span class="line">  &quot;listener&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;SOAMname&quot;: &quot;docker-test.com&quot;,</span><br><span class="line">  &quot;SOARname&quot;: &quot;root.docker-test.com&quot;,</span><br><span class="line">  &quot;SOARefresh&quot;: 10,</span><br><span class="line">  &quot;SOARetry&quot;:   3,</span><br><span class="line">  &quot;SOAExpire&quot;:  86400,</span><br><span class="line">  &quot;SOAMinttl&quot;: 10,</span><br><span class="line">  &quot;IPSources&quot;: [&quot;netinfo&quot;, &quot;mesos&quot;, &quot;host&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 mesos-dns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv mesos-dns-v0.6.0-linux-amd64 mesos-dns</span><br><span class="line">chmod +x mesos-dns</span><br><span class="line">./mesos-dns -config=config.json -v=2</span><br></pre></td></tr></table></figure><p>mesos-dns 会启动 53 和 8123 两个端口， 53 为dns端口，8123 为http api端口。  </p><h5 id="HTTP-API-接口"><a href="#HTTP-API-接口" class="headerlink" title="HTTP API 接口"></a>HTTP API 接口</h5><table><thead><tr><th>URL</th><th>说明 </th></tr></thead><tbody><tr><td> <a href="http://10.0.0.49:8123/v1/version" target="_blank" rel="noopener">http://10.0.0.49:8123/v1/version</a></td><td>mesos-dns版本信息</td></tr><tr><td> <a href="http://10.0.0.49:8123/v1/config" target="_blank" rel="noopener">http://10.0.0.49:8123/v1/config</a></td><td>mesos-dns配置信息</td></tr><tr><td> <a href="http://10.0.0.49:8123/v1/hosts/{host}" target="_blank" rel="noopener">http://10.0.0.49:8123/v1/hosts/{host}</a></td><td>该host的IP地址信息</td></tr><tr><td> <a href="http://10.0.0.49:8123/v1/services/{service}" target="_blank" rel="noopener">http://10.0.0.49:8123/v1/services/{service}</a></td><td>该service的host、IP、端口信息</td></tr></tbody></table><p> 例子：</p><pre><code>http://10.0.0.49:8123/v1/hosts/nginxqq-nginx.marathon.slave.mesos</code></pre><p>  分析：marathon.slave.mesos 是固定的，mesos是condig.json中domain定义的，在往前是从节点，marathon是框架，nginx是组，nginxqq是appid </p><pre><code>http://10.0.0.49:8123/v1/services/_nginxqq-nginx._tcp.marathon.slave.mesos  </code></pre><p>  分析： _nginxqq-nginx._tcp.marathon.slave.mesos ， nginxqq容器的ID名，nginx为组名，_tcp.marathon.slave.mesos 为固定的。</p><h5 id="dig-获取mesos-dns信息"><a href="#dig-获取mesos-dns信息" class="headerlink" title="dig 获取mesos-dns信息"></a>dig 获取mesos-dns信息</h5><p>查找app所在节点的IP</p><pre><code>dig nginxqq-nginx.marathon.slave.mesos +short</code></pre><p>查找app服务端口号</p><pre><code>dig SRV _nginxqq-nginx._tcp.marathon.slave.mesos +short </code></pre><ul><li>其中 过得到的主机名 mesos-dns 是可以解析的，就是app所在的物理机。</li></ul><h4 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h4><p>创建 docker file 目录，放入所用的文件</p><pre><code>mkdir dockerfile-mesos-dnscd dockerfile-mesos-dnscp ~/mesos-dns .cp ~/config.json .</code></pre><p>编辑 Dockerfile 文件  </p><p>vim Dockerfile</p><pre><code>FROM centos:6WORKDIR /root/ADD mesos-dns /root/ADD config.json /root/EXPOSE 53 8123CMD [&quot;/root/mesos-dns&quot;, &quot;-config=/root/config.json&quot;, &quot;-v=2&quot;]</code></pre><p>生成镜像</p><pre><code>docker build -t stg-mesos-dns:0.6.0 .</code></pre><p>运行镜像</p><pre><code>docker run  -d --name=stg-mesos-dns --net=host stg-mesos-dns:0.6.0</code></pre>]]></content>
      
      <categories>
          
          <category> mesos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mesos </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
